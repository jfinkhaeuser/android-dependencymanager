<?xml version="1.0" encoding="UTF-8"?>
<project name="DependencyManager-client" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked in in Version
         Control Systems. -->
    <property file="local.properties" />

    <!-- The build.properties file can be created by you and the place to change
         some of the default property values used by the Ant rules.
         Here are some properties you may want to change/update:

         source.dir
             the name of the source directory. Default is 'src'.
         out.dir
             the name of the output directory. Default is 'bin'.

         This file is an integral part of the build system for your application and
         should be checked in in Version Control Systems.

         -->
    <property file="build.properties" />

    <!-- Usually generated by Android's special SetupTask -->
    <path id="android.target.classpath">
      <pathelement path="${android.platform.dir}/android.jar" />
    </path>

    <!-- Properties - copied from Android 2.0 build rules, so should feel
         familiar -->

    <!-- Usually generated by Android's special SetupTask -->
    <property name="aidl" value="${android.platform.dir}/tools/aidl" />

    <!-- Input directories -->
    <property name="source.dir" value="src" />
    <property name="source.absolute.dir" location="${source.dir}" />
    <!-- FIXME prune properties -->
    <property name="gen.dir" value="gen" />
    <property name="gen.absolute.dir" location="${gen.dir}" />
    <property name="resource.dir" value="res" />
    <property name="resource.absolute.dir" location="${resource.dir}" />
    <property name="asset.dir" value="assets" />
    <property name="asset.absolute.dir" location="${asset.dir}" />

    <!-- Directory for the third party java libraries -->
    <property name="external.libs.dir" value="libs" />
    <property name="external.libs.absolute.dir" location="${external.libs.dir}" />

    <!-- Directory for the native libraries -->
    <property name="native.libs.dir" value="libs" />
    <property name="native.libs.absolute.dir" location="${native.libs.dir}" />

    <!-- Output directories -->
    <property name="out.dir" value="bin" />
    <property name="out.absolute.dir" location="${out.dir}" />
    <property name="out.classes.dir" value="${out.absolute.dir}/classes" />
    <property name="out.classes.absolute.dir" location="${out.classes.dir}" />

    <!-- Verbosity -->
    <property name="verbose" value="false" />
    <!-- This is needed by emma as it uses multilevel verbosity instead of simple 'true' or 'false'
         The property 'verbosity' is not user configurable and depends exclusively on 'verbose'
         value.-->
    <condition property="verbosity" value="verbose" else="quiet">
        <istrue value="${verbose}" />
    </condition>
    <!-- This is needed to switch verbosity of zipalign and aapt. Depends exclusively on 'verbose'
         -->
    <condition property="v.option" value="-v" else="">
        <istrue value="${verbose}" />
    </condition>
    <!-- This is needed to switch verbosity of dx. Depends exclusively on 'verbose' -->
    <condition property="verbose.option" value="--verbose" else="">
        <istrue value="${verbose}" />
    </condition>



<!--    <taskdef name="setup"
        classname="com.android.ant.SetupTask"
        classpathref="android.antlibs" />
        -->

    <!-- Execute the Android Setup task that will setup some properties specific to the target,
         and import the build rules files.

         The rules file is imported from
            <SDK>/platforms/<target_platform>/templates/android_rules.xml

         To customize some build steps for your project:
         - copy the content of the main node <project> from android_rules.xml
         - paste it in this build.xml below the <setup /> task.
         - disable the import by changing the setup task below to <setup import="false" />

         This will ensure that the properties are setup correctly but that your customized
         build steps are used.
    -->
<!--    <setup /> -->

  <!-- Targets -->

  <target name="clean" description="Removes output files created by other targets.">
    <delete dir="${out.absolute.dir}" verbose="${verbose}" />
    <delete dir="${gen.absolute.dir}" verbose="${verbose}" />
  </target>

  <!-- Creates the output directories if they don't exist yet. -->
  <target name="-dirs">
    <echo>Creating output directories if needed...</echo>
    <mkdir dir="${resource.absolute.dir}" />
    <mkdir dir="${external.libs.absolute.dir}" />
    <mkdir dir="${gen.absolute.dir}" />
    <mkdir dir="${out.absolute.dir}" />
    <mkdir dir="${out.classes.absolute.dir}" />
  </target>


  <!-- Generates java classes from .aidl files. -->
  <target name="-aidl" depends="-dirs">
    <echo>Compiling aidl files into Java classes...</echo>
    <apply executable="${aidl}" failonerror="true">
<!--      <arg value="-p${android.aidl}" /> -->
      <arg value="-I${source.absolute.dir}" />
      <arg value="-o${gen.absolute.dir}" />
      <fileset dir="${source.absolute.dir}">
        <include name="**/*.aidl" />
      </fileset>
    </apply>
  </target>


  <!-- Compiles this project's .java files into .class files. -->
  <target name="compile" depends="-aidl"
      description="Compiles project's .java files into .class files"
    >
    <!-- If android rules are used for a test project, its classpath should include
         tested project's location -->
    <condition property="extensible.classpath"
        value="${tested.project.absolute.dir}/bin/classes" else="."
      >
      <isset property="tested.project.absolute.dir" />
    </condition>
    <javac encoding="ascii" target="1.5" debug="true" extdirs=""
        destdir="${out.classes.absolute.dir}"
        bootclasspathref="android.target.classpath"
        verbose="${verbose}" classpath="${extensible.classpath}"
      >
      <src path="${source.absolute.dir}" />
      <src path="${gen.absolute.dir}" />
      <classpath>
        <fileset dir="${external.libs.absolute.dir}" includes="*.jar" />
      </classpath>
    </javac>
  </target>

  <!-- Build library .jar file -->
  <target name="build" depends="compile">
    <jar destfile="${out.absolute.dir}/${ant.project.name}.jar" basedir="${out.classes.absolute.dir}" />
  </target>


  <target name="help">
    <!-- displays starts at col 13
          |13                                                              80| -->
    <echo>Ant Build. Available targets:</echo>
    <echo>   help:      Displays this help.</echo>
    <echo>   clean:     Removes output files created by other targets.</echo>
    <echo>   compile:   Compiles project's .java files into .class files.</echo>
    <echo>   build:     Builds the library .jar file.</echo>
  </target>

</project>
